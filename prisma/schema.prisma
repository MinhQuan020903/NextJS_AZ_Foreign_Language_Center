generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model User {
  id          Int       @id @default(autoincrement())
  name        String
  email       String    @unique
  password    String
  role        String?   @default("user")
  avatar      String?   @default("https://i0.wp.com/www.repol.copl.ulaval.ca/wp-content/uploads/2019/01/default-user-icon.jpg?ssl=1")
  address     String?   @default("VietNam")
  birthDay    DateTime?
  indexSalary Int?
  level       Int?
  salary      Int?
  addresses   Address[]
}

model Address {
  id          Int     @id @default(autoincrement())
  city        String
  district    String
  selected    Boolean @default(false)
  ward        String
  street      String
  houseNumber String
  userId      Int
  user        User    @relation(fields: [userId], references: [id])

  @@index([userId])
}

model Assignment {
  id               Int      @id @default(autoincrement())
  name             String
  moduleId         Int
  skillId          Int
  bandScoreId      Int
  startTime        DateTime
  files            String?  @db.LongText
  lastModifiedTime DateTime @default(now())

  @@index([bandScoreId])
  @@index([moduleId])
  @@index([skillId])
}

model Assignment_ClassSession {
  id             Int @id @default(autoincrement())
  classSessionId Int
  assignmentId   Int

  @@index([assignmentId])
  @@index([classSessionId])
}

model Assignment_User {
  id           Int    @id @default(autoincrement())
  userId       Int
  assignmentId Int
  score        Float?

  @@index([assignmentId])
  @@index([userId])
}

model BandScore {
  id       Int    @id @default(autoincrement())
  moduleId Int
  name     String

  @@index([moduleId])
}

model ClassSession {
  id            Int      @id @default(autoincrement())
  courseId      Int
  teacherId     Int
  skillId       Int?     @default(1)
  roomId        Int
  StartTime     DateTime
  timeId        Int
  CategoryColor String   @default("#fecaca")
  name          String?  @default("Lesson")

  @@index([courseId])
  @@index([roomId])
  @@index([teacherId])
  @@index([timeId])
}

model ClassShift {
  id     Int  @id @default(autoincrement())
  roomId Int?
  timeId Int

  @@index([roomId])
  @@index([timeId])
}

model Course {
  id                Int      @id @default(autoincrement())
  moduleId          Int      @default(1)
  BandScoreId       Int      @default(1)
  name              String   @default("online")
  totalSession      Int      @default(0)
  startTime         DateTime
  endTime           DateTime
  totalAttendance   Int      @default(0)
  tuitionFee        Int
  totalCost         Int
  recommendCourseId Int?
  thumbnail         String?

  @@index([BandScoreId])
  @@index([moduleId])
}

model CourseDetails {
  id          Int     @id @default(autoincrement())
  courseId    Int
  subtitle    String  @db.LongText
  description String? @db.LongText

  @@index([courseId])
}

model Facility {
  id            Int    @id @default(autoincrement())
  name          String
  roomId        Int    @unique
  broom         Int
  ceilingFan    Int
  chair         Int
  table         Int
  waterPurifier Int

  @@index([roomId])
}

model Module {
  id   Int    @id @default(autoincrement())
  name String
}

model MultipleChoiceQuestion {
  id           Int     @id @default(autoincrement())
  assignmentId Int
  question     String
  answer       Int
  option1      String
  option2      String
  option3      String
  option4      String
  audio        String?

  @@index([assignmentId])
}

model Room {
  id         Int     @id @default(autoincrement())
  name       String
  status     String? @default("Free")
  typeId     Int
  note       String?
  attendance Int
  capacity   Int
  floor      Int
  toilet     Int

  @@index([typeId])
}

model RoomType {
  id   Int    @id @default(autoincrement())
  name String
}

model Skill {
  id   Int    @id @default(autoincrement())
  name String
}

model TimeShift {
  id   Int    @id @default(autoincrement())
  time String
}

model AssignmentToAssignment_ClassSession {
  A Int
  B Int

  @@unique([A, B], map: "_AssignmentToAssignment_ClassSession_AB_unique")
  @@index([B], map: "_AssignmentToAssignment_ClassSession_B_index")
  @@map("_AssignmentToAssignment_ClassSession")
}

model AssignmentToAssignment_User {
  A Int
  B Int

  @@unique([A, B], map: "_AssignmentToAssignment_User_AB_unique")
  @@index([B], map: "_AssignmentToAssignment_User_B_index")
  @@map("_AssignmentToAssignment_User")
}

model Assignment_ClassSessionToClassSession {
  A Int
  B Int

  @@unique([A, B], map: "_Assignment_ClassSessionToClassSession_AB_unique")
  @@index([B], map: "_Assignment_ClassSessionToClassSession_B_index")
  @@map("_Assignment_ClassSessionToClassSession")
}
